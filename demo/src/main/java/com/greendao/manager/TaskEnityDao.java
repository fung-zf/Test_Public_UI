package com.greendao.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xzkydz.greendao.bean.TaskEnity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ENITY".
*/
public class TaskEnityDao extends AbstractDao<TaskEnity, Long> {

    public static final String TABLENAME = "TASK_ENITY";

    /**
     * Properties of entity TaskEnity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UnitName = new Property(1, String.class, "unitName", false, "UNIT_NAME");
        public final static Property GasePumpNumber = new Property(2, String.class, "gasePumpNumber", false, "GASE_PUMP_NUMBER");
        public final static Property PeopleName = new Property(3, String.class, "peopleName", false, "PEOPLE_NAME");
        public final static Property _IsCompleteTask = new Property(4, boolean.class, "_IsCompleteTask", false, "__IS_COMPLETE_TASK");
        public final static Property TaskHaveGetData = new Property(5, int.class, "taskHaveGetData", false, "TASK_HAVE_GET_DATA");
        public final static Property GreateTaskTime = new Property(6, String.class, "greateTaskTime", false, "GREATE_TASK_TIME");
        public final static Property _IsMainPipeLine = new Property(7, boolean.class, "_IsMainPipeLine", false, "__IS_MAIN_PIPE_LINE");
        public final static Property Lljlx = new Property(8, String.class, "lljlx", false, "LLJLX");
        public final static Property Lljxs = new Property(9, String.class, "lljxs", false, "LLJXS");
        public final static Property Ltmd = new Property(10, String.class, "ltmd", false, "LTMD");
        public final static Property GdnjPtg = new Property(11, String.class, "gdnjPtg", false, "GDNJ_PTG");
        public final static Property Djxh = new Property(12, String.class, "djxh", false, "DJXH");
        public final static Property Qblc = new Property(13, String.class, "qblc", false, "QBLC");
        public final static Property Csff = new Property(14, String.class, "csff", false, "CSFF");
        public final static Property Cdxl = new Property(15, String.class, "cdxl", false, "CDXL");
        public final static Property DybbOne = new Property(16, String.class, "dybbOne", false, "DYBB_ONE");
        public final static Property DybbTwo = new Property(17, String.class, "dybbTwo", false, "DYBB_TWO");
        public final static Property DlbbOne = new Property(18, String.class, "dlbbOne", false, "DLBB_ONE");
        public final static Property DlbbTwo = new Property(19, String.class, "dlbbTwo", false, "DLBB_TWO");
        public final static Property Motor_eddy = new Property(20, String.class, "motor_eddy", false, "MOTOR_EDDY");
        public final static Property Motor_eddl = new Property(21, String.class, "motor_eddl", false, "MOTOR_EDDL");
        public final static Property Motor_edgl = new Property(22, String.class, "motor_edgl", false, "MOTOR_EDGL");
        public final static Property Motor_edxl = new Property(23, String.class, "motor_edxl", false, "MOTOR_EDXL");
        public final static Property Motor_kzdl = new Property(24, String.class, "motor_kzdl", false, "MOTOR_KZDL");
        public final static Property Motor_kzgl = new Property(25, String.class, "motor_kzgl", false, "MOTOR_KZGL");
        public final static Property Motor_edglys = new Property(26, String.class, "motor_edglys", false, "MOTOR_EDGLYS");
        public final static Property Motor_js = new Property(27, String.class, "motor_js", false, "MOTOR_JS");
        public final static Property Motor_wgjjdl = new Property(28, String.class, "motor_wgjjdl", false, "MOTOR_WGJJDL");
        public final static Property Motor_IsChecked = new Property(29, String.class, "motor_IsChecked", false, "MOTOR__IS_CHECKED");
        public final static Property _IsInput = new Property(30, boolean.class, "_IsInput", false, "__IS_INPUT");
        public final static Property _IsInputDjgl = new Property(31, boolean.class, "_IsInputDjgl", false, "__IS_INPUT_DJGL");
        public final static Property InputDjgl = new Property(32, String.class, "inputDjgl", false, "INPUT_DJGL");
        public final static Property _IsInputQtwd = new Property(33, boolean.class, "_IsInputQtwd", false, "__IS_INPUT_QTWD");
        public final static Property InputQtwd = new Property(34, String.class, "inputQtwd", false, "INPUT_QTWD");
        public final static Property _IsInputJqjy = new Property(35, boolean.class, "_IsInputJqjy", false, "__IS_INPUT_JQJY");
        public final static Property InputJqjy = new Property(36, String.class, "inputJqjy", false, "INPUT_JQJY");
        public final static Property _IsInputFy = new Property(37, boolean.class, "_IsInputFy", false, "__IS_INPUT_FY");
        public final static Property InputFy = new Property(38, String.class, "inputFy", false, "INPUT_FY");
        public final static Property _IsInputGdjy = new Property(39, boolean.class, "_IsInputGdjy", false, "__IS_INPUT_GDJY");
        public final static Property InputGdjy = new Property(40, String.class, "inputGdjy", false, "INPUT_GDJY");
        public final static Property _IsInputCy = new Property(41, boolean.class, "_IsInputCy", false, "__IS_INPUT_CY");
        public final static Property InputCy = new Property(42, String.class, "inputCy", false, "INPUT_CY");
        public final static Property _IsInputYqnd = new Property(43, boolean.class, "_IsInputYqnd", false, "__IS_INPUT_YQND");
        public final static Property InputYqnd = new Property(44, String.class, "inputYqnd", false, "INPUT_YQND");
        public final static Property _IsInputYyhtnd = new Property(45, boolean.class, "_IsInputYyhtnd", false, "__IS_INPUT_YYHTND");
        public final static Property InputYyhtnd = new Property(46, String.class, "inputYyhtnd", false, "INPUT_YYHTND");
        public final static Property _IsInputJwnd = new Property(47, boolean.class, "_IsInputJwnd", false, "__IS_INPUT_JWND");
        public final static Property InputJwnd = new Property(48, String.class, "inputJwnd", false, "INPUT_JWND");
        public final static Property _IsInputEyhtnd = new Property(49, boolean.class, "_IsInputEyhtnd", false, "__IS_INPUT_EYHTND");
        public final static Property InputEyhtnd = new Property(50, String.class, "inputEyhtnd", false, "INPUT_EYHTND");
        public final static Property GdnjZgl = new Property(51, String.class, "gdnjZgl", false, "GDNJ_ZGL");
    }


    public TaskEnityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEnityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ENITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIT_NAME\" TEXT," + // 1: unitName
                "\"GASE_PUMP_NUMBER\" TEXT," + // 2: gasePumpNumber
                "\"PEOPLE_NAME\" TEXT," + // 3: peopleName
                "\"__IS_COMPLETE_TASK\" INTEGER NOT NULL ," + // 4: _IsCompleteTask
                "\"TASK_HAVE_GET_DATA\" INTEGER NOT NULL ," + // 5: taskHaveGetData
                "\"GREATE_TASK_TIME\" TEXT," + // 6: greateTaskTime
                "\"__IS_MAIN_PIPE_LINE\" INTEGER NOT NULL ," + // 7: _IsMainPipeLine
                "\"LLJLX\" TEXT," + // 8: lljlx
                "\"LLJXS\" TEXT," + // 9: lljxs
                "\"LTMD\" TEXT," + // 10: ltmd
                "\"GDNJ_PTG\" TEXT," + // 11: gdnjPtg
                "\"DJXH\" TEXT," + // 12: djxh
                "\"QBLC\" TEXT," + // 13: qblc
                "\"CSFF\" TEXT," + // 14: csff
                "\"CDXL\" TEXT," + // 15: cdxl
                "\"DYBB_ONE\" TEXT," + // 16: dybbOne
                "\"DYBB_TWO\" TEXT," + // 17: dybbTwo
                "\"DLBB_ONE\" TEXT," + // 18: dlbbOne
                "\"DLBB_TWO\" TEXT," + // 19: dlbbTwo
                "\"MOTOR_EDDY\" TEXT," + // 20: motor_eddy
                "\"MOTOR_EDDL\" TEXT," + // 21: motor_eddl
                "\"MOTOR_EDGL\" TEXT," + // 22: motor_edgl
                "\"MOTOR_EDXL\" TEXT," + // 23: motor_edxl
                "\"MOTOR_KZDL\" TEXT," + // 24: motor_kzdl
                "\"MOTOR_KZGL\" TEXT," + // 25: motor_kzgl
                "\"MOTOR_EDGLYS\" TEXT," + // 26: motor_edglys
                "\"MOTOR_JS\" TEXT," + // 27: motor_js
                "\"MOTOR_WGJJDL\" TEXT," + // 28: motor_wgjjdl
                "\"MOTOR__IS_CHECKED\" TEXT," + // 29: motor_IsChecked
                "\"__IS_INPUT\" INTEGER NOT NULL ," + // 30: _IsInput
                "\"__IS_INPUT_DJGL\" INTEGER NOT NULL ," + // 31: _IsInputDjgl
                "\"INPUT_DJGL\" TEXT," + // 32: inputDjgl
                "\"__IS_INPUT_QTWD\" INTEGER NOT NULL ," + // 33: _IsInputQtwd
                "\"INPUT_QTWD\" TEXT," + // 34: inputQtwd
                "\"__IS_INPUT_JQJY\" INTEGER NOT NULL ," + // 35: _IsInputJqjy
                "\"INPUT_JQJY\" TEXT," + // 36: inputJqjy
                "\"__IS_INPUT_FY\" INTEGER NOT NULL ," + // 37: _IsInputFy
                "\"INPUT_FY\" TEXT," + // 38: inputFy
                "\"__IS_INPUT_GDJY\" INTEGER NOT NULL ," + // 39: _IsInputGdjy
                "\"INPUT_GDJY\" TEXT," + // 40: inputGdjy
                "\"__IS_INPUT_CY\" INTEGER NOT NULL ," + // 41: _IsInputCy
                "\"INPUT_CY\" TEXT," + // 42: inputCy
                "\"__IS_INPUT_YQND\" INTEGER NOT NULL ," + // 43: _IsInputYqnd
                "\"INPUT_YQND\" TEXT," + // 44: inputYqnd
                "\"__IS_INPUT_YYHTND\" INTEGER NOT NULL ," + // 45: _IsInputYyhtnd
                "\"INPUT_YYHTND\" TEXT," + // 46: inputYyhtnd
                "\"__IS_INPUT_JWND\" INTEGER NOT NULL ," + // 47: _IsInputJwnd
                "\"INPUT_JWND\" TEXT," + // 48: inputJwnd
                "\"__IS_INPUT_EYHTND\" INTEGER NOT NULL ," + // 49: _IsInputEyhtnd
                "\"INPUT_EYHTND\" TEXT," + // 50: inputEyhtnd
                "\"GDNJ_ZGL\" TEXT);"); // 51: gdnjZgl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ENITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEnity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(2, unitName);
        }
 
        String gasePumpNumber = entity.getGasePumpNumber();
        if (gasePumpNumber != null) {
            stmt.bindString(3, gasePumpNumber);
        }
 
        String peopleName = entity.getPeopleName();
        if (peopleName != null) {
            stmt.bindString(4, peopleName);
        }
        stmt.bindLong(5, entity.get_IsCompleteTask() ? 1L: 0L);
        stmt.bindLong(6, entity.getTaskHaveGetData());
 
        String greateTaskTime = entity.getGreateTaskTime();
        if (greateTaskTime != null) {
            stmt.bindString(7, greateTaskTime);
        }
        stmt.bindLong(8, entity.get_IsMainPipeLine() ? 1L: 0L);
 
        String lljlx = entity.getLljlx();
        if (lljlx != null) {
            stmt.bindString(9, lljlx);
        }
 
        String lljxs = entity.getLljxs();
        if (lljxs != null) {
            stmt.bindString(10, lljxs);
        }
 
        String ltmd = entity.getLtmd();
        if (ltmd != null) {
            stmt.bindString(11, ltmd);
        }
 
        String gdnjPtg = entity.getGdnjPtg();
        if (gdnjPtg != null) {
            stmt.bindString(12, gdnjPtg);
        }
 
        String djxh = entity.getDjxh();
        if (djxh != null) {
            stmt.bindString(13, djxh);
        }
 
        String qblc = entity.getQblc();
        if (qblc != null) {
            stmt.bindString(14, qblc);
        }
 
        String csff = entity.getCsff();
        if (csff != null) {
            stmt.bindString(15, csff);
        }
 
        String cdxl = entity.getCdxl();
        if (cdxl != null) {
            stmt.bindString(16, cdxl);
        }
 
        String dybbOne = entity.getDybbOne();
        if (dybbOne != null) {
            stmt.bindString(17, dybbOne);
        }
 
        String dybbTwo = entity.getDybbTwo();
        if (dybbTwo != null) {
            stmt.bindString(18, dybbTwo);
        }
 
        String dlbbOne = entity.getDlbbOne();
        if (dlbbOne != null) {
            stmt.bindString(19, dlbbOne);
        }
 
        String dlbbTwo = entity.getDlbbTwo();
        if (dlbbTwo != null) {
            stmt.bindString(20, dlbbTwo);
        }
 
        String motor_eddy = entity.getMotor_eddy();
        if (motor_eddy != null) {
            stmt.bindString(21, motor_eddy);
        }
 
        String motor_eddl = entity.getMotor_eddl();
        if (motor_eddl != null) {
            stmt.bindString(22, motor_eddl);
        }
 
        String motor_edgl = entity.getMotor_edgl();
        if (motor_edgl != null) {
            stmt.bindString(23, motor_edgl);
        }
 
        String motor_edxl = entity.getMotor_edxl();
        if (motor_edxl != null) {
            stmt.bindString(24, motor_edxl);
        }
 
        String motor_kzdl = entity.getMotor_kzdl();
        if (motor_kzdl != null) {
            stmt.bindString(25, motor_kzdl);
        }
 
        String motor_kzgl = entity.getMotor_kzgl();
        if (motor_kzgl != null) {
            stmt.bindString(26, motor_kzgl);
        }
 
        String motor_edglys = entity.getMotor_edglys();
        if (motor_edglys != null) {
            stmt.bindString(27, motor_edglys);
        }
 
        String motor_js = entity.getMotor_js();
        if (motor_js != null) {
            stmt.bindString(28, motor_js);
        }
 
        String motor_wgjjdl = entity.getMotor_wgjjdl();
        if (motor_wgjjdl != null) {
            stmt.bindString(29, motor_wgjjdl);
        }
 
        String motor_IsChecked = entity.getMotor_IsChecked();
        if (motor_IsChecked != null) {
            stmt.bindString(30, motor_IsChecked);
        }
        stmt.bindLong(31, entity.get_IsInput() ? 1L: 0L);
        stmt.bindLong(32, entity.get_IsInputDjgl() ? 1L: 0L);
 
        String inputDjgl = entity.getInputDjgl();
        if (inputDjgl != null) {
            stmt.bindString(33, inputDjgl);
        }
        stmt.bindLong(34, entity.get_IsInputQtwd() ? 1L: 0L);
 
        String inputQtwd = entity.getInputQtwd();
        if (inputQtwd != null) {
            stmt.bindString(35, inputQtwd);
        }
        stmt.bindLong(36, entity.get_IsInputJqjy() ? 1L: 0L);
 
        String inputJqjy = entity.getInputJqjy();
        if (inputJqjy != null) {
            stmt.bindString(37, inputJqjy);
        }
        stmt.bindLong(38, entity.get_IsInputFy() ? 1L: 0L);
 
        String inputFy = entity.getInputFy();
        if (inputFy != null) {
            stmt.bindString(39, inputFy);
        }
        stmt.bindLong(40, entity.get_IsInputGdjy() ? 1L: 0L);
 
        String inputGdjy = entity.getInputGdjy();
        if (inputGdjy != null) {
            stmt.bindString(41, inputGdjy);
        }
        stmt.bindLong(42, entity.get_IsInputCy() ? 1L: 0L);
 
        String inputCy = entity.getInputCy();
        if (inputCy != null) {
            stmt.bindString(43, inputCy);
        }
        stmt.bindLong(44, entity.get_IsInputYqnd() ? 1L: 0L);
 
        String inputYqnd = entity.getInputYqnd();
        if (inputYqnd != null) {
            stmt.bindString(45, inputYqnd);
        }
        stmt.bindLong(46, entity.get_IsInputYyhtnd() ? 1L: 0L);
 
        String inputYyhtnd = entity.getInputYyhtnd();
        if (inputYyhtnd != null) {
            stmt.bindString(47, inputYyhtnd);
        }
        stmt.bindLong(48, entity.get_IsInputJwnd() ? 1L: 0L);
 
        String inputJwnd = entity.getInputJwnd();
        if (inputJwnd != null) {
            stmt.bindString(49, inputJwnd);
        }
        stmt.bindLong(50, entity.get_IsInputEyhtnd() ? 1L: 0L);
 
        String inputEyhtnd = entity.getInputEyhtnd();
        if (inputEyhtnd != null) {
            stmt.bindString(51, inputEyhtnd);
        }
 
        String gdnjZgl = entity.getGdnjZgl();
        if (gdnjZgl != null) {
            stmt.bindString(52, gdnjZgl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEnity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(2, unitName);
        }
 
        String gasePumpNumber = entity.getGasePumpNumber();
        if (gasePumpNumber != null) {
            stmt.bindString(3, gasePumpNumber);
        }
 
        String peopleName = entity.getPeopleName();
        if (peopleName != null) {
            stmt.bindString(4, peopleName);
        }
        stmt.bindLong(5, entity.get_IsCompleteTask() ? 1L: 0L);
        stmt.bindLong(6, entity.getTaskHaveGetData());
 
        String greateTaskTime = entity.getGreateTaskTime();
        if (greateTaskTime != null) {
            stmt.bindString(7, greateTaskTime);
        }
        stmt.bindLong(8, entity.get_IsMainPipeLine() ? 1L: 0L);
 
        String lljlx = entity.getLljlx();
        if (lljlx != null) {
            stmt.bindString(9, lljlx);
        }
 
        String lljxs = entity.getLljxs();
        if (lljxs != null) {
            stmt.bindString(10, lljxs);
        }
 
        String ltmd = entity.getLtmd();
        if (ltmd != null) {
            stmt.bindString(11, ltmd);
        }
 
        String gdnjPtg = entity.getGdnjPtg();
        if (gdnjPtg != null) {
            stmt.bindString(12, gdnjPtg);
        }
 
        String djxh = entity.getDjxh();
        if (djxh != null) {
            stmt.bindString(13, djxh);
        }
 
        String qblc = entity.getQblc();
        if (qblc != null) {
            stmt.bindString(14, qblc);
        }
 
        String csff = entity.getCsff();
        if (csff != null) {
            stmt.bindString(15, csff);
        }
 
        String cdxl = entity.getCdxl();
        if (cdxl != null) {
            stmt.bindString(16, cdxl);
        }
 
        String dybbOne = entity.getDybbOne();
        if (dybbOne != null) {
            stmt.bindString(17, dybbOne);
        }
 
        String dybbTwo = entity.getDybbTwo();
        if (dybbTwo != null) {
            stmt.bindString(18, dybbTwo);
        }
 
        String dlbbOne = entity.getDlbbOne();
        if (dlbbOne != null) {
            stmt.bindString(19, dlbbOne);
        }
 
        String dlbbTwo = entity.getDlbbTwo();
        if (dlbbTwo != null) {
            stmt.bindString(20, dlbbTwo);
        }
 
        String motor_eddy = entity.getMotor_eddy();
        if (motor_eddy != null) {
            stmt.bindString(21, motor_eddy);
        }
 
        String motor_eddl = entity.getMotor_eddl();
        if (motor_eddl != null) {
            stmt.bindString(22, motor_eddl);
        }
 
        String motor_edgl = entity.getMotor_edgl();
        if (motor_edgl != null) {
            stmt.bindString(23, motor_edgl);
        }
 
        String motor_edxl = entity.getMotor_edxl();
        if (motor_edxl != null) {
            stmt.bindString(24, motor_edxl);
        }
 
        String motor_kzdl = entity.getMotor_kzdl();
        if (motor_kzdl != null) {
            stmt.bindString(25, motor_kzdl);
        }
 
        String motor_kzgl = entity.getMotor_kzgl();
        if (motor_kzgl != null) {
            stmt.bindString(26, motor_kzgl);
        }
 
        String motor_edglys = entity.getMotor_edglys();
        if (motor_edglys != null) {
            stmt.bindString(27, motor_edglys);
        }
 
        String motor_js = entity.getMotor_js();
        if (motor_js != null) {
            stmt.bindString(28, motor_js);
        }
 
        String motor_wgjjdl = entity.getMotor_wgjjdl();
        if (motor_wgjjdl != null) {
            stmt.bindString(29, motor_wgjjdl);
        }
 
        String motor_IsChecked = entity.getMotor_IsChecked();
        if (motor_IsChecked != null) {
            stmt.bindString(30, motor_IsChecked);
        }
        stmt.bindLong(31, entity.get_IsInput() ? 1L: 0L);
        stmt.bindLong(32, entity.get_IsInputDjgl() ? 1L: 0L);
 
        String inputDjgl = entity.getInputDjgl();
        if (inputDjgl != null) {
            stmt.bindString(33, inputDjgl);
        }
        stmt.bindLong(34, entity.get_IsInputQtwd() ? 1L: 0L);
 
        String inputQtwd = entity.getInputQtwd();
        if (inputQtwd != null) {
            stmt.bindString(35, inputQtwd);
        }
        stmt.bindLong(36, entity.get_IsInputJqjy() ? 1L: 0L);
 
        String inputJqjy = entity.getInputJqjy();
        if (inputJqjy != null) {
            stmt.bindString(37, inputJqjy);
        }
        stmt.bindLong(38, entity.get_IsInputFy() ? 1L: 0L);
 
        String inputFy = entity.getInputFy();
        if (inputFy != null) {
            stmt.bindString(39, inputFy);
        }
        stmt.bindLong(40, entity.get_IsInputGdjy() ? 1L: 0L);
 
        String inputGdjy = entity.getInputGdjy();
        if (inputGdjy != null) {
            stmt.bindString(41, inputGdjy);
        }
        stmt.bindLong(42, entity.get_IsInputCy() ? 1L: 0L);
 
        String inputCy = entity.getInputCy();
        if (inputCy != null) {
            stmt.bindString(43, inputCy);
        }
        stmt.bindLong(44, entity.get_IsInputYqnd() ? 1L: 0L);
 
        String inputYqnd = entity.getInputYqnd();
        if (inputYqnd != null) {
            stmt.bindString(45, inputYqnd);
        }
        stmt.bindLong(46, entity.get_IsInputYyhtnd() ? 1L: 0L);
 
        String inputYyhtnd = entity.getInputYyhtnd();
        if (inputYyhtnd != null) {
            stmt.bindString(47, inputYyhtnd);
        }
        stmt.bindLong(48, entity.get_IsInputJwnd() ? 1L: 0L);
 
        String inputJwnd = entity.getInputJwnd();
        if (inputJwnd != null) {
            stmt.bindString(49, inputJwnd);
        }
        stmt.bindLong(50, entity.get_IsInputEyhtnd() ? 1L: 0L);
 
        String inputEyhtnd = entity.getInputEyhtnd();
        if (inputEyhtnd != null) {
            stmt.bindString(51, inputEyhtnd);
        }
 
        String gdnjZgl = entity.getGdnjZgl();
        if (gdnjZgl != null) {
            stmt.bindString(52, gdnjZgl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskEnity readEntity(Cursor cursor, int offset) {
        TaskEnity entity = new TaskEnity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unitName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gasePumpNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // peopleName
            cursor.getShort(offset + 4) != 0, // _IsCompleteTask
            cursor.getInt(offset + 5), // taskHaveGetData
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // greateTaskTime
            cursor.getShort(offset + 7) != 0, // _IsMainPipeLine
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lljlx
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lljxs
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ltmd
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gdnjPtg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // djxh
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // qblc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // csff
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cdxl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dybbOne
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dybbTwo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // dlbbOne
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dlbbTwo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // motor_eddy
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // motor_eddl
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // motor_edgl
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // motor_edxl
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // motor_kzdl
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // motor_kzgl
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // motor_edglys
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // motor_js
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // motor_wgjjdl
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // motor_IsChecked
            cursor.getShort(offset + 30) != 0, // _IsInput
            cursor.getShort(offset + 31) != 0, // _IsInputDjgl
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // inputDjgl
            cursor.getShort(offset + 33) != 0, // _IsInputQtwd
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // inputQtwd
            cursor.getShort(offset + 35) != 0, // _IsInputJqjy
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // inputJqjy
            cursor.getShort(offset + 37) != 0, // _IsInputFy
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // inputFy
            cursor.getShort(offset + 39) != 0, // _IsInputGdjy
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // inputGdjy
            cursor.getShort(offset + 41) != 0, // _IsInputCy
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // inputCy
            cursor.getShort(offset + 43) != 0, // _IsInputYqnd
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // inputYqnd
            cursor.getShort(offset + 45) != 0, // _IsInputYyhtnd
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // inputYyhtnd
            cursor.getShort(offset + 47) != 0, // _IsInputJwnd
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // inputJwnd
            cursor.getShort(offset + 49) != 0, // _IsInputEyhtnd
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // inputEyhtnd
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51) // gdnjZgl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEnity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGasePumpNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPeopleName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.set_IsCompleteTask(cursor.getShort(offset + 4) != 0);
        entity.setTaskHaveGetData(cursor.getInt(offset + 5));
        entity.setGreateTaskTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.set_IsMainPipeLine(cursor.getShort(offset + 7) != 0);
        entity.setLljlx(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLljxs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLtmd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGdnjPtg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDjxh(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQblc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCsff(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCdxl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDybbOne(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDybbTwo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDlbbOne(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDlbbTwo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMotor_eddy(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMotor_eddl(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMotor_edgl(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMotor_edxl(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMotor_kzdl(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMotor_kzgl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMotor_edglys(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMotor_js(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setMotor_wgjjdl(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setMotor_IsChecked(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.set_IsInput(cursor.getShort(offset + 30) != 0);
        entity.set_IsInputDjgl(cursor.getShort(offset + 31) != 0);
        entity.setInputDjgl(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.set_IsInputQtwd(cursor.getShort(offset + 33) != 0);
        entity.setInputQtwd(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.set_IsInputJqjy(cursor.getShort(offset + 35) != 0);
        entity.setInputJqjy(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.set_IsInputFy(cursor.getShort(offset + 37) != 0);
        entity.setInputFy(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.set_IsInputGdjy(cursor.getShort(offset + 39) != 0);
        entity.setInputGdjy(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.set_IsInputCy(cursor.getShort(offset + 41) != 0);
        entity.setInputCy(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.set_IsInputYqnd(cursor.getShort(offset + 43) != 0);
        entity.setInputYqnd(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.set_IsInputYyhtnd(cursor.getShort(offset + 45) != 0);
        entity.setInputYyhtnd(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.set_IsInputJwnd(cursor.getShort(offset + 47) != 0);
        entity.setInputJwnd(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.set_IsInputEyhtnd(cursor.getShort(offset + 49) != 0);
        entity.setInputEyhtnd(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setGdnjZgl(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskEnity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskEnity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskEnity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
